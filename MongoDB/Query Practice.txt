// $eq
db.practice.find({ favoutiteColor: { $eq: "Blue" } }, { favoutiteColor: 1 })

// $ne
db.practice.find({ gender: { $ne: "Female" } })
    .project({ gender: 1 })

// $gt
db.practice.find({ age: { $gt : 30 }}).project({ age: 1 })

// $gte: 
db.practice.find({ age: { $gte : 30 }}).project({ age: 1 })

// $lt
db.practice.find({ age: { $lt : 50 }}).project({ age: 1 })

// $lte
db.practice.find({ age: { $lte : 18 }}).project({ age: 1 }).sort({ age:-1 })

// $gt & $lt
db.practice.find({ age: { $gt: 18, $lt: 30 } }).project({ age: 1 })

// $in (shows only the selected values in the array)
db.practice.find({ age: { $in: [18, 20] } })

// $in with implict and condition
db.practice.find({ gender: "Female", age: { $in: [18, 20] } })

// $nin (shows only the values that are not in the array)
db.practice.find({ age: { $nin: [18, 20, 30, 35, 33] } })

// implict and condition chain
 db.practice.find({
     gender:"Female",
     age: { $nin: [18, 20, 30, 35, 33] },
     interests: {$in : ["Gaming", "Travelling"]} 
 }).project({
     gender: 1,
     age: 1,
     interests: 1
 })

// $and (explicit and)
db.practice.find({
    $and: [
        { gender: "Female" },
        { age: { $lt: 30 } },
        { "skills.name": "JAVASCRIPT" }
    ]
}).project({
    gender: 1,
    age: 1,
    "skills.name": 1
})

// $or (satisfies any one of the conditions)
db.practice.find({
    $or: [
        { gender: "Female" },
        { age: { $lt: 30 } },
        { "skills.name": "JAVASCRIPT" }
    ]
}).project({
    gender: 1,
    age: 1,
    "skills.name": 1
})

db.practice.find({
    $or: [
        { "skills.name": "PYTHON" },
        { "skills.name": "JAVASCRIPT" }
    ]
}).project({
    "skills.name": 1
})

db.practice.find({ "skills.name": { $in: ["JAVASCRIPT", "PYTHON"] } })
    .project({
        "skills.name": 1
    })


// --- wrong example: implicit and (comma) doesn't work on same field name ---
// db.practice.find({ age: { $ne: 18}, age: { $gt: 15} }).
// project({age: 1})
// .sort({ age:-1 })

// right approach (explicit and)
db.practice.find({
    $and:
        [{ age: { $ne: 18 } },
        { age: { $gt: 15 } }]
})
    .projection({ age: 1 })


// update : use in non array/primitive fields
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $set: {
            company: "Intel"
        }
    }
)

// $addToSet: adding values in array (adds one value)
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $addToSet: {
            interests: "Reading"
        }
    }
)

// $addToSet + $each: adds multiple values in array 
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $addToSet: {
            interests:{$each: ["Reading", "Playing"]}
        }
    }
)

// $push: pushes single / multiple values in array INCLUDING DUPLICATE
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $push: {
            interests:{$each: ["Reading", "Playing"]}
        }
    }
)

// $unset: Deletes an entire field
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $unset: {
            education: ""
        }
    }
)

// $pop: pops one value from an array (1 removes from the last, -1 removes from the start)
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $pop: {
            interests: 1
        }
    }
)

// $pull: removes a specific value from an array
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $pull: {
            friends: "Tanmoy Parvez"
        }
    }
)

// $pullAll: removes multiple specific values from an array
db.practice.updateOne(
    { _id: ObjectId("6406ad65fc13ae5a400000c6") },
    {
        $pullAll: {
            friends: [ "Mizanur Rahman", "Rasel Ahmed"]
        }
    }
)

// deleteOne: Deletes an entire document
db.practice.deleteOne({ _id: ObjectId("6406ad65fc13ae5a400000c6") })






